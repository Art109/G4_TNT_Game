//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Rhythm Game Tutorial/Inputs/RhythmInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RhythmInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RhythmInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RhythmInputs"",
    ""maps"": [
        {
            ""name"": ""RhyThmGameplay"",
            ""id"": ""b9554ad4-3025-449d-9a74-2a8fe5e43894"",
            ""actions"": [
                {
                    ""name"": ""ActionButton"",
                    ""type"": ""Button"",
                    ""id"": ""754a9340-f498-4c83-9a97-150ffa345847"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackButton"",
                    ""type"": ""Button"",
                    ""id"": ""4ddd61c5-7fe7-4f82-87f5-fb4462199077"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""c8b5823f-995a-4179-8ff7-58ff6c0069cd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""f479be44-fcfe-4232-82c4-8f810cb30f47"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownArrow"",
                    ""type"": ""Button"",
                    ""id"": ""e228b12e-ed90-4fa7-a421-2aa4003276b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpArrow"",
                    ""type"": ""Button"",
                    ""id"": ""be5ed878-175f-488b-9427-20be0500b694"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""c1ae6076-11e4-4156-9f95-ffb56b7a5756"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftAnalog"",
                    ""type"": ""Button"",
                    ""id"": ""4bfcfa1b-b559-43b7-b9c5-72c4ee4c55f9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ebf05eeb-d611-47e8-be63-1195d32e0bb4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2011f964-081f-471c-9d39-045adf56e7b1"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec2e3911-3357-423c-91fc-360db1c190ed"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0284499b-b045-4dd4-8133-b76fff0a5b34"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f51acca-92a9-412d-bf8f-ee452d9d5e5e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1cc266eb-e951-43b8-9704-30cff3220384"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c36ed975-6f1f-45b4-9f59-d6eb5c74c4ad"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95733a21-e2e0-430c-b78e-360a1e210414"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAnalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75d05500-a9de-4877-a5aa-5ac79fae80f4"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAnalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RhyThmGameplay
        m_RhyThmGameplay = asset.FindActionMap("RhyThmGameplay", throwIfNotFound: true);
        m_RhyThmGameplay_ActionButton = m_RhyThmGameplay.FindAction("ActionButton", throwIfNotFound: true);
        m_RhyThmGameplay_BackButton = m_RhyThmGameplay.FindAction("BackButton", throwIfNotFound: true);
        m_RhyThmGameplay_Start = m_RhyThmGameplay.FindAction("Start", throwIfNotFound: true);
        m_RhyThmGameplay_LeftArrow = m_RhyThmGameplay.FindAction("LeftArrow", throwIfNotFound: true);
        m_RhyThmGameplay_DownArrow = m_RhyThmGameplay.FindAction("DownArrow", throwIfNotFound: true);
        m_RhyThmGameplay_UpArrow = m_RhyThmGameplay.FindAction("UpArrow", throwIfNotFound: true);
        m_RhyThmGameplay_RightArrow = m_RhyThmGameplay.FindAction("RightArrow", throwIfNotFound: true);
        m_RhyThmGameplay_LeftAnalog = m_RhyThmGameplay.FindAction("LeftAnalog", throwIfNotFound: true);
    }

    ~@RhythmInputs()
    {
        UnityEngine.Debug.Assert(!m_RhyThmGameplay.enabled, "This will cause a leak and performance issues, RhythmInputs.RhyThmGameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RhyThmGameplay
    private readonly InputActionMap m_RhyThmGameplay;
    private List<IRhyThmGameplayActions> m_RhyThmGameplayActionsCallbackInterfaces = new List<IRhyThmGameplayActions>();
    private readonly InputAction m_RhyThmGameplay_ActionButton;
    private readonly InputAction m_RhyThmGameplay_BackButton;
    private readonly InputAction m_RhyThmGameplay_Start;
    private readonly InputAction m_RhyThmGameplay_LeftArrow;
    private readonly InputAction m_RhyThmGameplay_DownArrow;
    private readonly InputAction m_RhyThmGameplay_UpArrow;
    private readonly InputAction m_RhyThmGameplay_RightArrow;
    private readonly InputAction m_RhyThmGameplay_LeftAnalog;
    public struct RhyThmGameplayActions
    {
        private @RhythmInputs m_Wrapper;
        public RhyThmGameplayActions(@RhythmInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActionButton => m_Wrapper.m_RhyThmGameplay_ActionButton;
        public InputAction @BackButton => m_Wrapper.m_RhyThmGameplay_BackButton;
        public InputAction @Start => m_Wrapper.m_RhyThmGameplay_Start;
        public InputAction @LeftArrow => m_Wrapper.m_RhyThmGameplay_LeftArrow;
        public InputAction @DownArrow => m_Wrapper.m_RhyThmGameplay_DownArrow;
        public InputAction @UpArrow => m_Wrapper.m_RhyThmGameplay_UpArrow;
        public InputAction @RightArrow => m_Wrapper.m_RhyThmGameplay_RightArrow;
        public InputAction @LeftAnalog => m_Wrapper.m_RhyThmGameplay_LeftAnalog;
        public InputActionMap Get() { return m_Wrapper.m_RhyThmGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RhyThmGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IRhyThmGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_RhyThmGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RhyThmGameplayActionsCallbackInterfaces.Add(instance);
            @ActionButton.started += instance.OnActionButton;
            @ActionButton.performed += instance.OnActionButton;
            @ActionButton.canceled += instance.OnActionButton;
            @BackButton.started += instance.OnBackButton;
            @BackButton.performed += instance.OnBackButton;
            @BackButton.canceled += instance.OnBackButton;
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
            @LeftArrow.started += instance.OnLeftArrow;
            @LeftArrow.performed += instance.OnLeftArrow;
            @LeftArrow.canceled += instance.OnLeftArrow;
            @DownArrow.started += instance.OnDownArrow;
            @DownArrow.performed += instance.OnDownArrow;
            @DownArrow.canceled += instance.OnDownArrow;
            @UpArrow.started += instance.OnUpArrow;
            @UpArrow.performed += instance.OnUpArrow;
            @UpArrow.canceled += instance.OnUpArrow;
            @RightArrow.started += instance.OnRightArrow;
            @RightArrow.performed += instance.OnRightArrow;
            @RightArrow.canceled += instance.OnRightArrow;
            @LeftAnalog.started += instance.OnLeftAnalog;
            @LeftAnalog.performed += instance.OnLeftAnalog;
            @LeftAnalog.canceled += instance.OnLeftAnalog;
        }

        private void UnregisterCallbacks(IRhyThmGameplayActions instance)
        {
            @ActionButton.started -= instance.OnActionButton;
            @ActionButton.performed -= instance.OnActionButton;
            @ActionButton.canceled -= instance.OnActionButton;
            @BackButton.started -= instance.OnBackButton;
            @BackButton.performed -= instance.OnBackButton;
            @BackButton.canceled -= instance.OnBackButton;
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
            @LeftArrow.started -= instance.OnLeftArrow;
            @LeftArrow.performed -= instance.OnLeftArrow;
            @LeftArrow.canceled -= instance.OnLeftArrow;
            @DownArrow.started -= instance.OnDownArrow;
            @DownArrow.performed -= instance.OnDownArrow;
            @DownArrow.canceled -= instance.OnDownArrow;
            @UpArrow.started -= instance.OnUpArrow;
            @UpArrow.performed -= instance.OnUpArrow;
            @UpArrow.canceled -= instance.OnUpArrow;
            @RightArrow.started -= instance.OnRightArrow;
            @RightArrow.performed -= instance.OnRightArrow;
            @RightArrow.canceled -= instance.OnRightArrow;
            @LeftAnalog.started -= instance.OnLeftAnalog;
            @LeftAnalog.performed -= instance.OnLeftAnalog;
            @LeftAnalog.canceled -= instance.OnLeftAnalog;
        }

        public void RemoveCallbacks(IRhyThmGameplayActions instance)
        {
            if (m_Wrapper.m_RhyThmGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRhyThmGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_RhyThmGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RhyThmGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RhyThmGameplayActions @RhyThmGameplay => new RhyThmGameplayActions(this);
    public interface IRhyThmGameplayActions
    {
        void OnActionButton(InputAction.CallbackContext context);
        void OnBackButton(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
        void OnLeftArrow(InputAction.CallbackContext context);
        void OnDownArrow(InputAction.CallbackContext context);
        void OnUpArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
        void OnLeftAnalog(InputAction.CallbackContext context);
    }
}
